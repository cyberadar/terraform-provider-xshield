// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/colortokens/terraform-provider-xshield/internal/provider/types"
	"github.com/colortokens/terraform-provider-xshield/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *TemplateDataSourceModel) RefreshFromSharedTemplate(resp *shared.Template) {
	if resp != nil {
		r.AccessPolicyTemplate = types.BoolPointerValue(resp.AccessPolicyTemplate)
		r.ColortokensManaged = types.BoolPointerValue(resp.ColortokensManaged)
		r.ID = types.StringPointerValue(resp.ID)
		r.TemplateCategory = types.StringPointerValue(resp.TemplateCategory)
		r.TemplateDescription = types.StringPointerValue(resp.TemplateDescription)
		r.TemplateName = types.StringPointerValue(resp.TemplateName)
		r.TemplatePaths = []tfTypes.MetadataPath{}
		if len(r.TemplatePaths) > len(resp.TemplatePaths) {
			r.TemplatePaths = r.TemplatePaths[:len(resp.TemplatePaths)]
		}
		for templatePathsCount, templatePathsItem := range resp.TemplatePaths {
			var templatePaths1 tfTypes.MetadataPath
			templatePaths1.DestinationAssetID = types.StringPointerValue(templatePathsItem.DestinationAssetID)
			if templatePathsItem.DestinationNamedNetwork == nil {
				templatePaths1.DestinationNamedNetwork = nil
			} else {
				templatePaths1.DestinationNamedNetwork = &tfTypes.MetadataNamedNetworkReference{}
				templatePaths1.DestinationNamedNetwork.NamedNetworkID = types.StringPointerValue(templatePathsItem.DestinationNamedNetwork.NamedNetworkID)
				templatePaths1.DestinationNamedNetwork.NamedNetworkName = types.StringPointerValue(templatePathsItem.DestinationNamedNetwork.NamedNetworkName)
			}
			if templatePathsItem.DestinationTagBasedPolicy == nil {
				templatePaths1.DestinationTagBasedPolicy = nil
			} else {
				templatePaths1.DestinationTagBasedPolicy = &tfTypes.MetadataTagBasedPolicyReference{}
				templatePaths1.DestinationTagBasedPolicy.Criteria = types.StringPointerValue(templatePathsItem.DestinationTagBasedPolicy.Criteria)
				templatePaths1.DestinationTagBasedPolicy.CriteriaAsParams = types.StringPointerValue(templatePathsItem.DestinationTagBasedPolicy.CriteriaAsParams)
				templatePaths1.DestinationTagBasedPolicy.TagBasedPolicyID = types.StringPointerValue(templatePathsItem.DestinationTagBasedPolicy.TagBasedPolicyID)
				templatePaths1.DestinationTagBasedPolicy.TagBasedPolicyName = types.StringPointerValue(templatePathsItem.DestinationTagBasedPolicy.TagBasedPolicyName)
			}
			templatePaths1.Direction = types.StringPointerValue(templatePathsItem.Direction)
			templatePaths1.Domain = types.StringPointerValue(templatePathsItem.Domain)
			templatePaths1.DstIP = types.StringPointerValue(templatePathsItem.DstIP)
			templatePaths1.DstProcess = types.StringPointerValue(templatePathsItem.DstProcess)
			templatePaths1.ID = types.StringPointerValue(templatePathsItem.ID)
			templatePaths1.Method = types.StringPointerValue(templatePathsItem.Method)
			templatePaths1.Port = types.StringPointerValue(templatePathsItem.Port)
			templatePaths1.PortName = types.StringPointerValue(templatePathsItem.PortName)
			templatePaths1.Protocol = types.StringPointerValue(templatePathsItem.Protocol)
			templatePaths1.SourceAssetID = types.StringPointerValue(templatePathsItem.SourceAssetID)
			if templatePathsItem.SourceNamedNetwork == nil {
				templatePaths1.SourceNamedNetwork = nil
			} else {
				templatePaths1.SourceNamedNetwork = &tfTypes.MetadataNamedNetworkReference{}
				templatePaths1.SourceNamedNetwork.NamedNetworkID = types.StringPointerValue(templatePathsItem.SourceNamedNetwork.NamedNetworkID)
				templatePaths1.SourceNamedNetwork.NamedNetworkName = types.StringPointerValue(templatePathsItem.SourceNamedNetwork.NamedNetworkName)
			}
			if templatePathsItem.SourceTagBasedPolicy == nil {
				templatePaths1.SourceTagBasedPolicy = nil
			} else {
				templatePaths1.SourceTagBasedPolicy = &tfTypes.MetadataTagBasedPolicyReference{}
				templatePaths1.SourceTagBasedPolicy.Criteria = types.StringPointerValue(templatePathsItem.SourceTagBasedPolicy.Criteria)
				templatePaths1.SourceTagBasedPolicy.CriteriaAsParams = types.StringPointerValue(templatePathsItem.SourceTagBasedPolicy.CriteriaAsParams)
				templatePaths1.SourceTagBasedPolicy.TagBasedPolicyID = types.StringPointerValue(templatePathsItem.SourceTagBasedPolicy.TagBasedPolicyID)
				templatePaths1.SourceTagBasedPolicy.TagBasedPolicyName = types.StringPointerValue(templatePathsItem.SourceTagBasedPolicy.TagBasedPolicyName)
			}
			templatePaths1.SrcIP = types.StringPointerValue(templatePathsItem.SrcIP)
			templatePaths1.SrcProcess = types.StringPointerValue(templatePathsItem.SrcProcess)
			templatePaths1.URI = types.StringPointerValue(templatePathsItem.URI)
			if templatePathsCount+1 > len(r.TemplatePaths) {
				r.TemplatePaths = append(r.TemplatePaths, templatePaths1)
			} else {
				r.TemplatePaths[templatePathsCount].DestinationAssetID = templatePaths1.DestinationAssetID
				r.TemplatePaths[templatePathsCount].DestinationNamedNetwork = templatePaths1.DestinationNamedNetwork
				r.TemplatePaths[templatePathsCount].DestinationTagBasedPolicy = templatePaths1.DestinationTagBasedPolicy
				r.TemplatePaths[templatePathsCount].Direction = templatePaths1.Direction
				r.TemplatePaths[templatePathsCount].Domain = templatePaths1.Domain
				r.TemplatePaths[templatePathsCount].DstIP = templatePaths1.DstIP
				r.TemplatePaths[templatePathsCount].DstProcess = templatePaths1.DstProcess
				r.TemplatePaths[templatePathsCount].ID = templatePaths1.ID
				r.TemplatePaths[templatePathsCount].Method = templatePaths1.Method
				r.TemplatePaths[templatePathsCount].Port = templatePaths1.Port
				r.TemplatePaths[templatePathsCount].PortName = templatePaths1.PortName
				r.TemplatePaths[templatePathsCount].Protocol = templatePaths1.Protocol
				r.TemplatePaths[templatePathsCount].SourceAssetID = templatePaths1.SourceAssetID
				r.TemplatePaths[templatePathsCount].SourceNamedNetwork = templatePaths1.SourceNamedNetwork
				r.TemplatePaths[templatePathsCount].SourceTagBasedPolicy = templatePaths1.SourceTagBasedPolicy
				r.TemplatePaths[templatePathsCount].SrcIP = templatePaths1.SrcIP
				r.TemplatePaths[templatePathsCount].SrcProcess = templatePaths1.SrcProcess
				r.TemplatePaths[templatePathsCount].URI = templatePaths1.URI
			}
		}
		r.TemplatePorts = []tfTypes.MetadataPort{}
		if len(r.TemplatePorts) > len(resp.TemplatePorts) {
			r.TemplatePorts = r.TemplatePorts[:len(resp.TemplatePorts)]
		}
		for templatePortsCount, templatePortsItem := range resp.TemplatePorts {
			var templatePorts1 tfTypes.MetadataPort
			templatePorts1.ID = types.StringPointerValue(templatePortsItem.ID)
			templatePorts1.ListenPort = types.StringPointerValue(templatePortsItem.ListenPort)
			templatePorts1.ListenPortName = types.StringPointerValue(templatePortsItem.ListenPortName)
			templatePorts1.ListenPortProtocol = types.StringPointerValue(templatePortsItem.ListenPortProtocol)
			if templatePortsItem.ListenPortReviewed != nil {
				templatePorts1.ListenPortReviewed = types.StringValue(string(*templatePortsItem.ListenPortReviewed))
			} else {
				templatePorts1.ListenPortReviewed = types.StringNull()
			}
			templatePorts1.ListenProcessNames = []types.String{}
			for _, v := range templatePortsItem.ListenProcessNames {
				templatePorts1.ListenProcessNames = append(templatePorts1.ListenProcessNames, types.StringValue(v))
			}
			if templatePortsCount+1 > len(r.TemplatePorts) {
				r.TemplatePorts = append(r.TemplatePorts, templatePorts1)
			} else {
				r.TemplatePorts[templatePortsCount].ID = templatePorts1.ID
				r.TemplatePorts[templatePortsCount].ListenPort = templatePorts1.ListenPort
				r.TemplatePorts[templatePortsCount].ListenPortName = templatePorts1.ListenPortName
				r.TemplatePorts[templatePortsCount].ListenPortProtocol = templatePorts1.ListenPortProtocol
				r.TemplatePorts[templatePortsCount].ListenPortReviewed = templatePorts1.ListenPortReviewed
				r.TemplatePorts[templatePortsCount].ListenProcessNames = templatePorts1.ListenProcessNames
			}
		}
		if resp.TemplateType != nil {
			r.TemplateType = types.StringValue(string(*resp.TemplateType))
		} else {
			r.TemplateType = types.StringNull()
		}
	}
}
