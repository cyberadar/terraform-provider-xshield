// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/colortokens/terraform-provider-xshield/internal/provider/types"
	"github.com/colortokens/terraform-provider-xshield/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *AssetDataSourceModel) RefreshFromSharedAssetDetails(resp *shared.AssetDetails) {
	if resp != nil {
		r.AgentID = types.StringPointerValue(resp.AgentID)
		r.AgentName = types.StringPointerValue(resp.AgentName)
		r.AgentStatus = types.StringPointerValue(resp.AgentStatus)
		r.AgentVersion = types.StringPointerValue(resp.AgentVersion)
		r.AssetAvailability = types.StringPointerValue(resp.AssetAvailability)
		r.AssetInternetFacing = types.BoolPointerValue(resp.AssetInternetFacing)
		r.AssetName = types.StringValue(resp.AssetName)
		r.AssetRisk = types.StringPointerValue(resp.AssetRisk)
		r.AttackSurface = types.StringPointerValue(resp.AttackSurface)
		if resp.AttackSurfacePendingChanges == nil {
			r.AttackSurfacePendingChanges = nil
		} else {
			r.AttackSurfacePendingChanges = &tfTypes.PendingChanges{}
			r.AttackSurfacePendingChanges.AllowTemplates = make([]types.String, 0, len(resp.AttackSurfacePendingChanges.AllowTemplates))
			for _, v := range resp.AttackSurfacePendingChanges.AllowTemplates {
				r.AttackSurfacePendingChanges.AllowTemplates = append(r.AttackSurfacePendingChanges.AllowTemplates, types.StringValue(v))
			}
			r.AttackSurfacePendingChanges.BlockTemplates = make([]types.String, 0, len(resp.AttackSurfacePendingChanges.BlockTemplates))
			for _, v := range resp.AttackSurfacePendingChanges.BlockTemplates {
				r.AttackSurfacePendingChanges.BlockTemplates = append(r.AttackSurfacePendingChanges.BlockTemplates, types.StringValue(v))
			}
			r.AttackSurfacePendingChanges.InternetPaths = types.Int64PointerValue(resp.AttackSurfacePendingChanges.InternetPaths)
			r.AttackSurfacePendingChanges.InternetPorts = types.Int64PointerValue(resp.AttackSurfacePendingChanges.InternetPorts)
			r.AttackSurfacePendingChanges.IntranetChange = make([]types.String, 0, len(resp.AttackSurfacePendingChanges.IntranetChange))
			for _, v := range resp.AttackSurfacePendingChanges.IntranetChange {
				r.AttackSurfacePendingChanges.IntranetChange = append(r.AttackSurfacePendingChanges.IntranetChange, types.StringValue(v))
			}
			r.AttackSurfacePendingChanges.IntranetPaths = types.Int64PointerValue(resp.AttackSurfacePendingChanges.IntranetPaths)
			r.AttackSurfacePendingChanges.IntranetPorts = types.Int64PointerValue(resp.AttackSurfacePendingChanges.IntranetPorts)
			r.AttackSurfacePendingChanges.NamednetworkChange = make([]types.String, 0, len(resp.AttackSurfacePendingChanges.NamednetworkChange))
			for _, v := range resp.AttackSurfacePendingChanges.NamednetworkChange {
				r.AttackSurfacePendingChanges.NamednetworkChange = append(r.AttackSurfacePendingChanges.NamednetworkChange, types.StringValue(v))
			}
			r.AttackSurfacePendingChanges.ProgressiveSyncPending = types.BoolPointerValue(resp.AttackSurfacePendingChanges.ProgressiveSyncPending)
			r.AttackSurfacePendingChanges.UnassignedAllowTemplates = make([]types.String, 0, len(resp.AttackSurfacePendingChanges.UnassignedAllowTemplates))
			for _, v := range resp.AttackSurfacePendingChanges.UnassignedAllowTemplates {
				r.AttackSurfacePendingChanges.UnassignedAllowTemplates = append(r.AttackSurfacePendingChanges.UnassignedAllowTemplates, types.StringValue(v))
			}
			r.AttackSurfacePendingChanges.UnassignedBlockTemplates = make([]types.String, 0, len(resp.AttackSurfacePendingChanges.UnassignedBlockTemplates))
			for _, v := range resp.AttackSurfacePendingChanges.UnassignedBlockTemplates {
				r.AttackSurfacePendingChanges.UnassignedBlockTemplates = append(r.AttackSurfacePendingChanges.UnassignedBlockTemplates, types.StringValue(v))
			}
		}
		r.AutoSynchronizeEnabled = types.BoolPointerValue(resp.AutoSynchronizeEnabled)
		r.BlastRadius = types.StringPointerValue(resp.BlastRadius)
		if resp.BlastRadiusPendingChanges == nil {
			r.BlastRadiusPendingChanges = nil
		} else {
			r.BlastRadiusPendingChanges = &tfTypes.PendingChanges{}
			r.BlastRadiusPendingChanges.AllowTemplates = make([]types.String, 0, len(resp.BlastRadiusPendingChanges.AllowTemplates))
			for _, v := range resp.BlastRadiusPendingChanges.AllowTemplates {
				r.BlastRadiusPendingChanges.AllowTemplates = append(r.BlastRadiusPendingChanges.AllowTemplates, types.StringValue(v))
			}
			r.BlastRadiusPendingChanges.BlockTemplates = make([]types.String, 0, len(resp.BlastRadiusPendingChanges.BlockTemplates))
			for _, v := range resp.BlastRadiusPendingChanges.BlockTemplates {
				r.BlastRadiusPendingChanges.BlockTemplates = append(r.BlastRadiusPendingChanges.BlockTemplates, types.StringValue(v))
			}
			r.BlastRadiusPendingChanges.InternetPaths = types.Int64PointerValue(resp.BlastRadiusPendingChanges.InternetPaths)
			r.BlastRadiusPendingChanges.InternetPorts = types.Int64PointerValue(resp.BlastRadiusPendingChanges.InternetPorts)
			r.BlastRadiusPendingChanges.IntranetChange = make([]types.String, 0, len(resp.BlastRadiusPendingChanges.IntranetChange))
			for _, v := range resp.BlastRadiusPendingChanges.IntranetChange {
				r.BlastRadiusPendingChanges.IntranetChange = append(r.BlastRadiusPendingChanges.IntranetChange, types.StringValue(v))
			}
			r.BlastRadiusPendingChanges.IntranetPaths = types.Int64PointerValue(resp.BlastRadiusPendingChanges.IntranetPaths)
			r.BlastRadiusPendingChanges.IntranetPorts = types.Int64PointerValue(resp.BlastRadiusPendingChanges.IntranetPorts)
			r.BlastRadiusPendingChanges.NamednetworkChange = make([]types.String, 0, len(resp.BlastRadiusPendingChanges.NamednetworkChange))
			for _, v := range resp.BlastRadiusPendingChanges.NamednetworkChange {
				r.BlastRadiusPendingChanges.NamednetworkChange = append(r.BlastRadiusPendingChanges.NamednetworkChange, types.StringValue(v))
			}
			r.BlastRadiusPendingChanges.ProgressiveSyncPending = types.BoolPointerValue(resp.BlastRadiusPendingChanges.ProgressiveSyncPending)
			r.BlastRadiusPendingChanges.UnassignedAllowTemplates = make([]types.String, 0, len(resp.BlastRadiusPendingChanges.UnassignedAllowTemplates))
			for _, v := range resp.BlastRadiusPendingChanges.UnassignedAllowTemplates {
				r.BlastRadiusPendingChanges.UnassignedAllowTemplates = append(r.BlastRadiusPendingChanges.UnassignedAllowTemplates, types.StringValue(v))
			}
			r.BlastRadiusPendingChanges.UnassignedBlockTemplates = make([]types.String, 0, len(resp.BlastRadiusPendingChanges.UnassignedBlockTemplates))
			for _, v := range resp.BlastRadiusPendingChanges.UnassignedBlockTemplates {
				r.BlastRadiusPendingChanges.UnassignedBlockTemplates = append(r.BlastRadiusPendingChanges.UnassignedBlockTemplates, types.StringValue(v))
			}
		}
		r.BusinessValue = types.StringPointerValue(resp.BusinessValue)
		r.CloudTags = []tfTypes.Tag{}
		if len(r.CloudTags) > len(resp.CloudTags) {
			r.CloudTags = r.CloudTags[:len(resp.CloudTags)]
		}
		for cloudTagsCount, cloudTagsItem := range resp.CloudTags {
			var cloudTags1 tfTypes.Tag
			cloudTags1.ID = types.StringPointerValue(cloudTagsItem.ID)
			cloudTags1.IsCloudTag = types.BoolPointerValue(cloudTagsItem.IsCloudTag)
			cloudTags1.Key = types.StringValue(cloudTagsItem.Key)
			cloudTags1.Value = types.StringValue(cloudTagsItem.Value)
			if cloudTagsCount+1 > len(r.CloudTags) {
				r.CloudTags = append(r.CloudTags, cloudTags1)
			} else {
				r.CloudTags[cloudTagsCount].ID = cloudTags1.ID
				r.CloudTags[cloudTagsCount].IsCloudTag = cloudTags1.IsCloudTag
				r.CloudTags[cloudTagsCount].Key = cloudTags1.Key
				r.CloudTags[cloudTagsCount].Value = cloudTags1.Value
			}
		}
		r.ClusterIdentifier = types.StringPointerValue(resp.ClusterIdentifier)
		r.ContainerNamespace = types.StringPointerValue(resp.ContainerNamespace)
		if len(resp.CoreTags) > 0 {
			r.CoreTags = make(map[string]types.String, len(resp.CoreTags))
			for key1, value1 := range resp.CoreTags {
				r.CoreTags[key1] = types.StringValue(value1)
			}
		}
		r.CPUCoreCount = types.Int64PointerValue(resp.CPUCoreCount)
		r.CPUName = types.StringPointerValue(resp.CPUName)
		if resp.CurrentTrafficConfiguration != nil {
			r.CurrentTrafficConfiguration = types.StringValue(string(*resp.CurrentTrafficConfiguration))
		} else {
			r.CurrentTrafficConfiguration = types.StringNull()
		}
		r.DeterministicID = types.StringPointerValue(resp.DeterministicID)
		r.DiskCapacityInGB = types.Int64PointerValue(resp.DiskCapacityInGB)
		r.HostName = types.StringPointerValue(resp.HostName)
		r.ID = types.StringPointerValue(resp.ID)
		r.InboundAssetStatus = types.StringPointerValue(resp.InboundAssetStatus)
		if resp.InboundInternetPaths == nil {
			r.InboundInternetPaths = nil
		} else {
			r.InboundInternetPaths = &tfTypes.ReviewCoverage{}
			r.InboundInternetPaths.Allowed = types.Int64PointerValue(resp.InboundInternetPaths.Allowed)
			r.InboundInternetPaths.AllowedPorts = types.Int64PointerValue(resp.InboundInternetPaths.AllowedPorts)
			r.InboundInternetPaths.Reviewed = types.Int64PointerValue(resp.InboundInternetPaths.Reviewed)
			r.InboundInternetPaths.Total = types.Int64PointerValue(resp.InboundInternetPaths.Total)
			r.InboundInternetPaths.Unreviewed = types.Int64PointerValue(resp.InboundInternetPaths.Unreviewed)
		}
		if resp.InboundInternetPorts == nil {
			r.InboundInternetPorts = nil
		} else {
			r.InboundInternetPorts = &tfTypes.ReviewCoverage{}
			r.InboundInternetPorts.Allowed = types.Int64PointerValue(resp.InboundInternetPorts.Allowed)
			r.InboundInternetPorts.AllowedPorts = types.Int64PointerValue(resp.InboundInternetPorts.AllowedPorts)
			r.InboundInternetPorts.Reviewed = types.Int64PointerValue(resp.InboundInternetPorts.Reviewed)
			r.InboundInternetPorts.Total = types.Int64PointerValue(resp.InboundInternetPorts.Total)
			r.InboundInternetPorts.Unreviewed = types.Int64PointerValue(resp.InboundInternetPorts.Unreviewed)
		}
		if resp.InboundIntranetPaths == nil {
			r.InboundIntranetPaths = nil
		} else {
			r.InboundIntranetPaths = &tfTypes.ReviewCoverage{}
			r.InboundIntranetPaths.Allowed = types.Int64PointerValue(resp.InboundIntranetPaths.Allowed)
			r.InboundIntranetPaths.AllowedPorts = types.Int64PointerValue(resp.InboundIntranetPaths.AllowedPorts)
			r.InboundIntranetPaths.Reviewed = types.Int64PointerValue(resp.InboundIntranetPaths.Reviewed)
			r.InboundIntranetPaths.Total = types.Int64PointerValue(resp.InboundIntranetPaths.Total)
			r.InboundIntranetPaths.Unreviewed = types.Int64PointerValue(resp.InboundIntranetPaths.Unreviewed)
		}
		if resp.InboundIntranetPorts == nil {
			r.InboundIntranetPorts = nil
		} else {
			r.InboundIntranetPorts = &tfTypes.ReviewCoverage{}
			r.InboundIntranetPorts.Allowed = types.Int64PointerValue(resp.InboundIntranetPorts.Allowed)
			r.InboundIntranetPorts.AllowedPorts = types.Int64PointerValue(resp.InboundIntranetPorts.AllowedPorts)
			r.InboundIntranetPorts.Reviewed = types.Int64PointerValue(resp.InboundIntranetPorts.Reviewed)
			r.InboundIntranetPorts.Total = types.Int64PointerValue(resp.InboundIntranetPorts.Total)
			r.InboundIntranetPorts.Unreviewed = types.Int64PointerValue(resp.InboundIntranetPorts.Unreviewed)
		}
		r.Interfaces = []tfTypes.NetworkInterface{}
		if len(r.Interfaces) > len(resp.Interfaces) {
			r.Interfaces = r.Interfaces[:len(resp.Interfaces)]
		}
		for interfacesCount, interfacesItem := range resp.Interfaces {
			var interfaces1 tfTypes.NetworkInterface
			interfaces1.Flags = make([]types.String, 0, len(interfacesItem.Flags))
			for _, v := range interfacesItem.Flags {
				interfaces1.Flags = append(interfaces1.Flags, types.StringValue(v))
			}
			interfaces1.Ipaddresses = make([]types.String, 0, len(interfacesItem.Ipaddresses))
			for _, v := range interfacesItem.Ipaddresses {
				interfaces1.Ipaddresses = append(interfaces1.Ipaddresses, types.StringValue(v))
			}
			interfaces1.Macaddress = types.StringPointerValue(interfacesItem.Macaddress)
			interfaces1.Name = types.StringValue(interfacesItem.Name)
			if interfacesCount+1 > len(r.Interfaces) {
				r.Interfaces = append(r.Interfaces, interfaces1)
			} else {
				r.Interfaces[interfacesCount].Flags = interfaces1.Flags
				r.Interfaces[interfacesCount].Ipaddresses = interfaces1.Ipaddresses
				r.Interfaces[interfacesCount].Macaddress = interfaces1.Macaddress
				r.Interfaces[interfacesCount].Name = interfaces1.Name
			}
		}
		r.KernelArchitecture = types.StringPointerValue(resp.KernelArchitecture)
		r.KernelVersion = types.StringPointerValue(resp.KernelVersion)
		r.LowestInboundAssetStatus = types.StringPointerValue(resp.LowestInboundAssetStatus)
		r.LowestOutboundAssetStatus = types.StringPointerValue(resp.LowestOutboundAssetStatus)
		r.LowestProgressiveInboundAssetStatus = types.StringPointerValue(resp.LowestProgressiveInboundAssetStatus)
		r.NamedNetworkChanges = []tfTypes.MetadataNamedNetworkReference{}
		if len(r.NamedNetworkChanges) > len(resp.NamedNetworkChanges) {
			r.NamedNetworkChanges = r.NamedNetworkChanges[:len(resp.NamedNetworkChanges)]
		}
		for namedNetworkChangesCount, namedNetworkChangesItem := range resp.NamedNetworkChanges {
			var namedNetworkChanges1 tfTypes.MetadataNamedNetworkReference
			namedNetworkChanges1.NamedNetworkID = types.StringPointerValue(namedNetworkChangesItem.NamedNetworkID)
			namedNetworkChanges1.NamedNetworkName = types.StringPointerValue(namedNetworkChangesItem.NamedNetworkName)
			if namedNetworkChangesCount+1 > len(r.NamedNetworkChanges) {
				r.NamedNetworkChanges = append(r.NamedNetworkChanges, namedNetworkChanges1)
			} else {
				r.NamedNetworkChanges[namedNetworkChangesCount].NamedNetworkID = namedNetworkChanges1.NamedNetworkID
				r.NamedNetworkChanges[namedNetworkChangesCount].NamedNetworkName = namedNetworkChanges1.NamedNetworkName
			}
		}
		r.NamednetworksAssigned = types.Int64PointerValue(resp.NamednetworksAssigned)
		r.OsName = types.StringPointerValue(resp.OsName)
		r.OutboundAssetStatus = types.StringPointerValue(resp.OutboundAssetStatus)
		if resp.OutboundInternetPaths == nil {
			r.OutboundInternetPaths = nil
		} else {
			r.OutboundInternetPaths = &tfTypes.ReviewCoverage{}
			r.OutboundInternetPaths.Allowed = types.Int64PointerValue(resp.OutboundInternetPaths.Allowed)
			r.OutboundInternetPaths.AllowedPorts = types.Int64PointerValue(resp.OutboundInternetPaths.AllowedPorts)
			r.OutboundInternetPaths.Reviewed = types.Int64PointerValue(resp.OutboundInternetPaths.Reviewed)
			r.OutboundInternetPaths.Total = types.Int64PointerValue(resp.OutboundInternetPaths.Total)
			r.OutboundInternetPaths.Unreviewed = types.Int64PointerValue(resp.OutboundInternetPaths.Unreviewed)
		}
		if resp.OutboundIntranetPaths == nil {
			r.OutboundIntranetPaths = nil
		} else {
			r.OutboundIntranetPaths = &tfTypes.ReviewCoverage{}
			r.OutboundIntranetPaths.Allowed = types.Int64PointerValue(resp.OutboundIntranetPaths.Allowed)
			r.OutboundIntranetPaths.AllowedPorts = types.Int64PointerValue(resp.OutboundIntranetPaths.AllowedPorts)
			r.OutboundIntranetPaths.Reviewed = types.Int64PointerValue(resp.OutboundIntranetPaths.Reviewed)
			r.OutboundIntranetPaths.Total = types.Int64PointerValue(resp.OutboundIntranetPaths.Total)
			r.OutboundIntranetPaths.Unreviewed = types.Int64PointerValue(resp.OutboundIntranetPaths.Unreviewed)
		}
		r.PendingAttackSurfaceChanges = types.BoolPointerValue(resp.PendingAttackSurfaceChanges)
		r.PendingBlastRadiusChanges = types.BoolPointerValue(resp.PendingBlastRadiusChanges)
		r.Platform = types.StringPointerValue(resp.Platform)
		r.PoliciesAssigned = types.Int64PointerValue(resp.PoliciesAssigned)
		r.PolicyStatus = types.StringPointerValue(resp.PolicyStatus)
		r.RAMCapacityInMB = types.Int64PointerValue(resp.RAMCapacityInMB)
		r.SecurityPatches = types.Int64PointerValue(resp.SecurityPatches)
		r.Tags = []tfTypes.Tag{}
		if len(r.Tags) > len(resp.Tags) {
			r.Tags = r.Tags[:len(resp.Tags)]
		}
		for tagsCount, tagsItem := range resp.Tags {
			var tags1 tfTypes.Tag
			tags1.ID = types.StringPointerValue(tagsItem.ID)
			tags1.IsCloudTag = types.BoolPointerValue(tagsItem.IsCloudTag)
			tags1.Key = types.StringValue(tagsItem.Key)
			tags1.Value = types.StringValue(tagsItem.Value)
			if tagsCount+1 > len(r.Tags) {
				r.Tags = append(r.Tags, tags1)
			} else {
				r.Tags[tagsCount].ID = tags1.ID
				r.Tags[tagsCount].IsCloudTag = tags1.IsCloudTag
				r.Tags[tagsCount].Key = tags1.Key
				r.Tags[tagsCount].Value = tags1.Value
			}
		}
		r.TemplateChanges = []tfTypes.TemplateReference{}
		if len(r.TemplateChanges) > len(resp.TemplateChanges) {
			r.TemplateChanges = r.TemplateChanges[:len(resp.TemplateChanges)]
		}
		for templateChangesCount, templateChangesItem := range resp.TemplateChanges {
			var templateChanges1 tfTypes.TemplateReference
			templateChanges1.TemplateID = types.StringPointerValue(templateChangesItem.TemplateID)
			templateChanges1.TemplateName = types.StringPointerValue(templateChangesItem.TemplateName)
			if templateChangesCount+1 > len(r.TemplateChanges) {
				r.TemplateChanges = append(r.TemplateChanges, templateChanges1)
			} else {
				r.TemplateChanges[templateChangesCount].TemplateID = templateChanges1.TemplateID
				r.TemplateChanges[templateChangesCount].TemplateName = templateChanges1.TemplateName
			}
		}
		r.TemplatesAssigned = types.Int64PointerValue(resp.TemplatesAssigned)
		r.TotalComments = types.Int64PointerValue(resp.TotalComments)
		r.TotalInboundComments = types.Int64PointerValue(resp.TotalInboundComments)
		r.TotalOutboundComments = types.Int64PointerValue(resp.TotalOutboundComments)
		r.TotalPaths = types.Int64PointerValue(resp.TotalPaths)
		r.TotalPorts = types.Int64PointerValue(resp.TotalPorts)
		r.TotalPortsPathRestricted = types.Int64PointerValue(resp.TotalPortsPathRestricted)
		r.Type = types.StringValue(resp.Type)
		r.UnreviewedPaths = types.Int64PointerValue(resp.UnreviewedPaths)
		r.UnreviewedPorts = types.Int64PointerValue(resp.UnreviewedPorts)
		if resp.UsergroupOutboundInternetPaths == nil {
			r.UsergroupOutboundInternetPaths = nil
		} else {
			r.UsergroupOutboundInternetPaths = &tfTypes.ReviewCoverage{}
			r.UsergroupOutboundInternetPaths.Allowed = types.Int64PointerValue(resp.UsergroupOutboundInternetPaths.Allowed)
			r.UsergroupOutboundInternetPaths.AllowedPorts = types.Int64PointerValue(resp.UsergroupOutboundInternetPaths.AllowedPorts)
			r.UsergroupOutboundInternetPaths.Reviewed = types.Int64PointerValue(resp.UsergroupOutboundInternetPaths.Reviewed)
			r.UsergroupOutboundInternetPaths.Total = types.Int64PointerValue(resp.UsergroupOutboundInternetPaths.Total)
			r.UsergroupOutboundInternetPaths.Unreviewed = types.Int64PointerValue(resp.UsergroupOutboundInternetPaths.Unreviewed)
		}
		if resp.UsergroupOutboundIntranetPaths == nil {
			r.UsergroupOutboundIntranetPaths = nil
		} else {
			r.UsergroupOutboundIntranetPaths = &tfTypes.ReviewCoverage{}
			r.UsergroupOutboundIntranetPaths.Allowed = types.Int64PointerValue(resp.UsergroupOutboundIntranetPaths.Allowed)
			r.UsergroupOutboundIntranetPaths.AllowedPorts = types.Int64PointerValue(resp.UsergroupOutboundIntranetPaths.AllowedPorts)
			r.UsergroupOutboundIntranetPaths.Reviewed = types.Int64PointerValue(resp.UsergroupOutboundIntranetPaths.Reviewed)
			r.UsergroupOutboundIntranetPaths.Total = types.Int64PointerValue(resp.UsergroupOutboundIntranetPaths.Total)
			r.UsergroupOutboundIntranetPaths.Unreviewed = types.Int64PointerValue(resp.UsergroupOutboundIntranetPaths.Unreviewed)
		}
		r.Usergroups = []tfTypes.AssetGroup{}
		if len(r.Usergroups) > len(resp.Usergroups) {
			r.Usergroups = r.Usergroups[:len(resp.Usergroups)]
		}
		for usergroupsCount, usergroupsItem := range resp.Usergroups {
			var usergroups1 tfTypes.AssetGroup
			usergroups1.Groupid = types.StringPointerValue(usergroupsItem.Groupid)
			if usergroupsCount+1 > len(r.Usergroups) {
				r.Usergroups = append(r.Usergroups, usergroups1)
			} else {
				r.Usergroups[usergroupsCount].Groupid = usergroups1.Groupid
			}
		}
		r.UsergroupTotalPaths = types.Int64PointerValue(resp.UsergroupTotalPaths)
		r.UsergroupUnreviewedPaths = types.Int64PointerValue(resp.UsergroupUnreviewedPaths)
		r.Users = []tfTypes.AssetUser{}
		if len(r.Users) > len(resp.Users) {
			r.Users = r.Users[:len(resp.Users)]
		}
		for usersCount, usersItem := range resp.Users {
			var users1 tfTypes.AssetUser
			users1.Assetid = types.StringValue(usersItem.Assetid)
			users1.Domainname = types.StringValue(usersItem.Domainname)
			users1.Email = types.StringPointerValue(usersItem.Email)
			users1.Logincount = types.Int64PointerValue(usersItem.Logincount)
			users1.Name = types.StringValue(usersItem.Name)
			users1.Scimuserid = types.StringPointerValue(usersItem.Scimuserid)
			users1.Signedin = types.BoolPointerValue(usersItem.Signedin)
			if usersCount+1 > len(r.Users) {
				r.Users = append(r.Users, users1)
			} else {
				r.Users[usersCount].Assetid = users1.Assetid
				r.Users[usersCount].Domainname = users1.Domainname
				r.Users[usersCount].Email = users1.Email
				r.Users[usersCount].Logincount = users1.Logincount
				r.Users[usersCount].Name = users1.Name
				r.Users[usersCount].Scimuserid = users1.Scimuserid
				r.Users[usersCount].Signedin = users1.Signedin
			}
		}
		r.VendorInfo = types.StringPointerValue(resp.VendorInfo)
		r.VirtualizationSystem = types.StringPointerValue(resp.VirtualizationSystem)
		r.Vulnerabilities = types.Int64PointerValue(resp.Vulnerabilities)
	}
}
