// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/colortokens/terraform-provider-xshield/internal/provider/types"
	"github.com/colortokens/terraform-provider-xshield/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
)

func (r *SegmentDataSourceModel) RefreshFromSharedTagBasedPolicyResponse(resp *shared.TagBasedPolicyResponse) {
	if resp != nil {
		r.AutoSynchronizeEnabled = types.BoolPointerValue(resp.AutoSynchronizeEnabled)
		r.BaselineBreachImpactScore = types.Int64PointerValue(resp.BaselineBreachImpactScore)
		r.BaselineMatchingAssets = types.Int64PointerValue(resp.BaselineMatchingAssets)
		r.Criteria = types.StringPointerValue(resp.Criteria)
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringPointerValue(resp.ID)
		r.LowestInboundPolicyStatus = types.StringPointerValue(resp.LowestInboundPolicyStatus)
		r.LowestOutboundPolicyStatus = types.StringPointerValue(resp.LowestOutboundPolicyStatus)
		r.LowestProgressiveInboundPolicyStatus = types.StringPointerValue(resp.LowestProgressiveInboundPolicyStatus)
		r.MatchingAssets = types.Int64PointerValue(resp.MatchingAssets)
		r.Milestones = []tfTypes.TagBasedPolicyMilestone{}
		if len(r.Milestones) > len(resp.Milestones) {
			r.Milestones = r.Milestones[:len(resp.Milestones)]
		}
		for milestonesCount, milestonesItem := range resp.Milestones {
			var milestones1 tfTypes.TagBasedPolicyMilestone
			if milestonesItem.CompletionPercentage != nil {
				milestones1.CompletionPercentage = types.NumberValue(big.NewFloat(float64(*milestonesItem.CompletionPercentage)))
			} else {
				milestones1.CompletionPercentage = types.NumberNull()
			}
			milestones1.MilestoneID = types.Int64PointerValue(milestonesItem.MilestoneID)
			milestones1.Name = types.StringPointerValue(milestonesItem.Name)
			if milestonesCount+1 > len(r.Milestones) {
				r.Milestones = append(r.Milestones, milestones1)
			} else {
				r.Milestones[milestonesCount].CompletionPercentage = milestones1.CompletionPercentage
				r.Milestones[milestonesCount].MilestoneID = milestones1.MilestoneID
				r.Milestones[milestonesCount].Name = milestones1.Name
			}
		}
		r.Namednetworks = []tfTypes.MetadataNamedNetworkReference{}
		if len(r.Namednetworks) > len(resp.Namednetworks) {
			r.Namednetworks = r.Namednetworks[:len(resp.Namednetworks)]
		}
		for namednetworksCount, namednetworksItem := range resp.Namednetworks {
			var namednetworks1 tfTypes.MetadataNamedNetworkReference
			namednetworks1.NamedNetworkID = types.StringPointerValue(namednetworksItem.NamedNetworkID)
			namednetworks1.NamedNetworkName = types.StringPointerValue(namednetworksItem.NamedNetworkName)
			if namednetworksCount+1 > len(r.Namednetworks) {
				r.Namednetworks = append(r.Namednetworks, namednetworks1)
			} else {
				r.Namednetworks[namednetworksCount].NamedNetworkID = namednetworks1.NamedNetworkID
				r.Namednetworks[namednetworksCount].NamedNetworkName = namednetworks1.NamedNetworkName
			}
		}
		r.PolicyAutomationConfigurable = types.BoolPointerValue(resp.PolicyAutomationConfigurable)
		r.TagBasedPolicyName = types.StringPointerValue(resp.TagBasedPolicyName)
		r.TargetBreachImpactScore = types.Int64PointerValue(resp.TargetBreachImpactScore)
		r.Templates = []tfTypes.TemplateReference{}
		if len(r.Templates) > len(resp.Templates) {
			r.Templates = r.Templates[:len(resp.Templates)]
		}
		for templatesCount, templatesItem := range resp.Templates {
			var templates1 tfTypes.TemplateReference
			templates1.TemplateID = types.StringPointerValue(templatesItem.TemplateID)
			templates1.TemplateName = types.StringPointerValue(templatesItem.TemplateName)
			if templatesCount+1 > len(r.Templates) {
				r.Templates = append(r.Templates, templates1)
			} else {
				r.Templates[templatesCount].TemplateID = templates1.TemplateID
				r.Templates[templatesCount].TemplateName = templates1.TemplateName
			}
		}
		r.Timeline = types.Int64PointerValue(resp.Timeline)
	}
}
