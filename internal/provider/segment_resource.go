// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/colortokens/terraform-provider-xshield/internal/provider/types"
	"github.com/colortokens/terraform-provider-xshield/internal/sdk"
	"github.com/colortokens/terraform-provider-xshield/internal/sdk/models/operations"
	speakeasy_objectvalidators "github.com/colortokens/terraform-provider-xshield/internal/validators/objectvalidators"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &SegmentResource{}
var _ resource.ResourceWithImportState = &SegmentResource{}

func NewSegmentResource() resource.Resource {
	return &SegmentResource{}
}

// SegmentResource defines the resource implementation.
type SegmentResource struct {
	client *sdk.Xshield
}

// SegmentResourceModel describes the resource data model.
type SegmentResourceModel struct {
	AutoSynchronizeEnabled               types.Bool                              `tfsdk:"auto_synchronize_enabled"`
	BaselineBreachImpactScore            types.Int64                             `tfsdk:"baseline_breach_impact_score"`
	BaselineMatchingAssets               types.Int64                             `tfsdk:"baseline_matching_assets"`
	Criteria                             types.String                            `tfsdk:"criteria"`
	CriteriaAsParams                     types.String                            `tfsdk:"criteria_as_params"`
	Description                          types.String                            `tfsdk:"description"`
	ID                                   types.String                            `tfsdk:"id"`
	LowestInboundPolicyStatus            types.String                            `tfsdk:"lowest_inbound_policy_status"`
	LowestOutboundPolicyStatus           types.String                            `tfsdk:"lowest_outbound_policy_status"`
	LowestProgressiveInboundPolicyStatus types.String                            `tfsdk:"lowest_progressive_inbound_policy_status"`
	MatchingAssets                       types.Int64                             `tfsdk:"matching_assets"`
	Milestones                           []tfTypes.TagBasedPolicyMilestone       `tfsdk:"milestones"`
	Namednetworks                        []tfTypes.MetadataNamedNetworkReference `tfsdk:"namednetworks"`
	PolicyAutomationConfigurable         types.Bool                              `tfsdk:"policy_automation_configurable"`
	TagBasedPolicyName                   types.String                            `tfsdk:"tag_based_policy_name"`
	TargetBreachImpactScore              types.Int64                             `tfsdk:"target_breach_impact_score"`
	Templates                            []tfTypes.TemplateReference             `tfsdk:"templates"`
	Timeline                             types.Int64                             `tfsdk:"timeline"`
}

func (r *SegmentResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_segment"
}

func (r *SegmentResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Segment Resource",
		Attributes: map[string]schema.Attribute{
			"auto_synchronize_enabled": schema.BoolAttribute{
				Computed: true,
			},
			"baseline_breach_impact_score": schema.Int64Attribute{
				Computed: true,
			},
			"baseline_matching_assets": schema.Int64Attribute{
				Computed: true,
			},
			"criteria": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"criteria_as_params": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
				Optional: true,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtMost(1000),
				},
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"lowest_inbound_policy_status": schema.StringAttribute{
				Computed: true,
			},
			"lowest_outbound_policy_status": schema.StringAttribute{
				Computed: true,
			},
			"lowest_progressive_inbound_policy_status": schema.StringAttribute{
				Computed: true,
			},
			"matching_assets": schema.Int64Attribute{
				Computed: true,
			},
			"milestones": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"completion_percentage": schema.NumberAttribute{
							Computed: true,
						},
						"milestone_id": schema.Int64Attribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"namednetworks": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"named_network_id": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
						"named_network_name": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
					},
				},
			},
			"policy_automation_configurable": schema.BoolAttribute{
				Computed: true,
			},
			"tag_based_policy_name": schema.StringAttribute{
				Computed: true,
				Optional: true,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtMost(256),
				},
			},
			"target_breach_impact_score": schema.Int64Attribute{
				Computed: true,
				Optional: true,
				Validators: []validator.Int64{
					int64validator.AtMost(100),
				},
			},
			"templates": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"template_id": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
						"template_name": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
					},
				},
			},
			"timeline": schema.Int64Attribute{
				Computed: true,
				Optional: true,
				Validators: []validator.Int64{
					int64validator.AtLeast(1),
				},
			},
		},
	}
}

func (r *SegmentResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Xshield)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Xshield, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SegmentResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *SegmentResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToSharedTagBasedPolicy()
	res, err := r.client.Tagbasedpolicies.CreateTagBasedPolicy(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 202 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.TagBasedPolicyResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedTagBasedPolicyResponse(res.TagBasedPolicyResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SegmentResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *SegmentResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var tagbasedpolicyID string
	tagbasedpolicyID = data.ID.ValueString()

	request := operations.GetTagBasedPolicyRequest{
		TagbasedpolicyID: tagbasedpolicyID,
	}
	res, err := r.client.Tagbasedpolicies.GetTagBasedPolicy(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.TagBasedPolicyResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedTagBasedPolicyResponse(res.TagBasedPolicyResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SegmentResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *SegmentResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	var tagbasedpolicyID string
	tagbasedpolicyID = data.ID.ValueString()

	tagBasedPolicy := *data.ToSharedTagBasedPolicy()
	request := operations.UpdateTagBasedPolicyMetadataRequest{
		TagbasedpolicyID: tagbasedpolicyID,
		TagBasedPolicy:   tagBasedPolicy,
	}
	res, err := r.client.Tagbasedpolicies.UpdateTagBasedPolicyMetadata(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var tagbasedpolicyId1 string
	tagbasedpolicyId1 = data.ID.ValueString()

	request1 := operations.AutomationConfigurationRequest{
		TagbasedpolicyID: tagbasedpolicyId1,
	}
	res1, err := r.client.Tagbasedpolicies.AutomationConfiguration(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 202 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SegmentResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *SegmentResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var tagbasedpolicyID string
	tagbasedpolicyID = data.ID.ValueString()

	request := operations.DeleteTagBasedPolicyRequest{
		TagbasedpolicyID: tagbasedpolicyID,
	}
	res, err := r.client.Tagbasedpolicies.DeleteTagBasedPolicy(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *SegmentResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}
