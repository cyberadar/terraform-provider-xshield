// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/colortokens/terraform-provider-xshield/internal/provider/types"
	"github.com/colortokens/terraform-provider-xshield/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
)

func (r *SegmentResourceModel) ToSharedTagBasedPolicy() *shared.TagBasedPolicy {
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	tagBasedPolicyName := new(string)
	if !r.TagBasedPolicyName.IsUnknown() && !r.TagBasedPolicyName.IsNull() {
		*tagBasedPolicyName = r.TagBasedPolicyName.ValueString()
	} else {
		tagBasedPolicyName = nil
	}
	targetBreachImpactScore := new(int64)
	if !r.TargetBreachImpactScore.IsUnknown() && !r.TargetBreachImpactScore.IsNull() {
		*targetBreachImpactScore = r.TargetBreachImpactScore.ValueInt64()
	} else {
		targetBreachImpactScore = nil
	}
	timeline := new(int64)
	if !r.Timeline.IsUnknown() && !r.Timeline.IsNull() {
		*timeline = r.Timeline.ValueInt64()
	} else {
		timeline = nil
	}
	criteria := new(string)
	if !r.Criteria.IsUnknown() && !r.Criteria.IsNull() {
		*criteria = r.Criteria.ValueString()
	} else {
		criteria = nil
	}
	criteriaAsParams := new(string)
	if !r.CriteriaAsParams.IsUnknown() && !r.CriteriaAsParams.IsNull() {
		*criteriaAsParams = r.CriteriaAsParams.ValueString()
	} else {
		criteriaAsParams = nil
	}
	var namednetworks []shared.MetadataNamedNetworkReference = []shared.MetadataNamedNetworkReference{}
	for _, namednetworksItem := range r.Namednetworks {
		namedNetworkID := new(string)
		if !namednetworksItem.NamedNetworkID.IsUnknown() && !namednetworksItem.NamedNetworkID.IsNull() {
			*namedNetworkID = namednetworksItem.NamedNetworkID.ValueString()
		} else {
			namedNetworkID = nil
		}
		namedNetworkName := new(string)
		if !namednetworksItem.NamedNetworkName.IsUnknown() && !namednetworksItem.NamedNetworkName.IsNull() {
			*namedNetworkName = namednetworksItem.NamedNetworkName.ValueString()
		} else {
			namedNetworkName = nil
		}
		namednetworks = append(namednetworks, shared.MetadataNamedNetworkReference{
			NamedNetworkID:   namedNetworkID,
			NamedNetworkName: namedNetworkName,
		})
	}
	var templates []shared.TemplateReference = []shared.TemplateReference{}
	for _, templatesItem := range r.Templates {
		templateID := new(string)
		if !templatesItem.TemplateID.IsUnknown() && !templatesItem.TemplateID.IsNull() {
			*templateID = templatesItem.TemplateID.ValueString()
		} else {
			templateID = nil
		}
		templateName := new(string)
		if !templatesItem.TemplateName.IsUnknown() && !templatesItem.TemplateName.IsNull() {
			*templateName = templatesItem.TemplateName.ValueString()
		} else {
			templateName = nil
		}
		templates = append(templates, shared.TemplateReference{
			TemplateID:   templateID,
			TemplateName: templateName,
		})
	}
	out := shared.TagBasedPolicy{
		ID:                      id,
		Description:             description,
		TagBasedPolicyName:      tagBasedPolicyName,
		TargetBreachImpactScore: targetBreachImpactScore,
		Timeline:                timeline,
		Criteria:                criteria,
		CriteriaAsParams:        criteriaAsParams,
		Namednetworks:           namednetworks,
		Templates:               templates,
	}
	return &out
}

func (r *SegmentResourceModel) RefreshFromSharedTagBasedPolicyResponse(resp *shared.TagBasedPolicyResponse) {
	if resp != nil {
		r.AutoSynchronizeEnabled = types.BoolPointerValue(resp.AutoSynchronizeEnabled)
		r.BaselineBreachImpactScore = types.Int64PointerValue(resp.BaselineBreachImpactScore)
		r.BaselineMatchingAssets = types.Int64PointerValue(resp.BaselineMatchingAssets)
		r.Criteria = types.StringPointerValue(resp.Criteria)
		r.CriteriaAsParams = types.StringPointerValue(resp.CriteriaAsParams)
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringPointerValue(resp.ID)
		r.LowestInboundPolicyStatus = types.StringPointerValue(resp.LowestInboundPolicyStatus)
		r.LowestOutboundPolicyStatus = types.StringPointerValue(resp.LowestOutboundPolicyStatus)
		r.LowestProgressiveInboundPolicyStatus = types.StringPointerValue(resp.LowestProgressiveInboundPolicyStatus)
		r.MatchingAssets = types.Int64PointerValue(resp.MatchingAssets)
		r.Milestones = []tfTypes.TagBasedPolicyMilestone{}
		if len(r.Milestones) > len(resp.Milestones) {
			r.Milestones = r.Milestones[:len(resp.Milestones)]
		}
		for milestonesCount, milestonesItem := range resp.Milestones {
			var milestones1 tfTypes.TagBasedPolicyMilestone
			if milestonesItem.CompletionPercentage != nil {
				milestones1.CompletionPercentage = types.NumberValue(big.NewFloat(float64(*milestonesItem.CompletionPercentage)))
			} else {
				milestones1.CompletionPercentage = types.NumberNull()
			}
			milestones1.MilestoneID = types.Int64PointerValue(milestonesItem.MilestoneID)
			milestones1.Name = types.StringPointerValue(milestonesItem.Name)
			if milestonesCount+1 > len(r.Milestones) {
				r.Milestones = append(r.Milestones, milestones1)
			} else {
				r.Milestones[milestonesCount].CompletionPercentage = milestones1.CompletionPercentage
				r.Milestones[milestonesCount].MilestoneID = milestones1.MilestoneID
				r.Milestones[milestonesCount].Name = milestones1.Name
			}
		}
		r.Namednetworks = []tfTypes.MetadataNamedNetworkReference{}
		if len(r.Namednetworks) > len(resp.Namednetworks) {
			r.Namednetworks = r.Namednetworks[:len(resp.Namednetworks)]
		}
		for namednetworksCount, namednetworksItem := range resp.Namednetworks {
			var namednetworks1 tfTypes.MetadataNamedNetworkReference
			namednetworks1.NamedNetworkID = types.StringPointerValue(namednetworksItem.NamedNetworkID)
			namednetworks1.NamedNetworkName = types.StringPointerValue(namednetworksItem.NamedNetworkName)
			if namednetworksCount+1 > len(r.Namednetworks) {
				r.Namednetworks = append(r.Namednetworks, namednetworks1)
			} else {
				r.Namednetworks[namednetworksCount].NamedNetworkID = namednetworks1.NamedNetworkID
				r.Namednetworks[namednetworksCount].NamedNetworkName = namednetworks1.NamedNetworkName
			}
		}
		r.PolicyAutomationConfigurable = types.BoolPointerValue(resp.PolicyAutomationConfigurable)
		r.TagBasedPolicyName = types.StringPointerValue(resp.TagBasedPolicyName)
		r.TargetBreachImpactScore = types.Int64PointerValue(resp.TargetBreachImpactScore)
		r.Templates = []tfTypes.TemplateReference{}
		if len(r.Templates) > len(resp.Templates) {
			r.Templates = r.Templates[:len(resp.Templates)]
		}
		for templatesCount, templatesItem := range resp.Templates {
			var templates1 tfTypes.TemplateReference
			templates1.TemplateID = types.StringPointerValue(templatesItem.TemplateID)
			templates1.TemplateName = types.StringPointerValue(templatesItem.TemplateName)
			if templatesCount+1 > len(r.Templates) {
				r.Templates = append(r.Templates, templates1)
			} else {
				r.Templates[templatesCount].TemplateID = templates1.TemplateID
				r.Templates[templatesCount].TemplateName = templates1.TemplateName
			}
		}
		r.Timeline = types.Int64PointerValue(resp.Timeline)
	}
}
