// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-xshield-sdk/internal/provider/types"
	"github.com/speakeasy/terraform-provider-xshield-sdk/internal/sdk"
	"github.com/speakeasy/terraform-provider-xshield-sdk/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SegmentDataSource{}
var _ datasource.DataSourceWithConfigure = &SegmentDataSource{}

func NewSegmentDataSource() datasource.DataSource {
	return &SegmentDataSource{}
}

// SegmentDataSource is the data source implementation.
type SegmentDataSource struct {
	client *sdk.XshieldSDK
}

// SegmentDataSourceModel describes the data model.
type SegmentDataSourceModel struct {
	AutoSynchronizeEnabled               types.Bool                         `tfsdk:"auto_synchronize_enabled"`
	Criteria                             types.String                       `tfsdk:"criteria"`
	CriteriaAsParams                     types.String                       `tfsdk:"criteria_as_params"`
	Description                          types.String                       `tfsdk:"description"`
	ID                                   types.String                       `tfsdk:"id"`
	LowestInboundPolicyStatus            types.String                       `tfsdk:"lowest_inbound_policy_status"`
	LowestOutboundPolicyStatus           types.String                       `tfsdk:"lowest_outbound_policy_status"`
	LowestProgressiveInboundPolicyStatus types.String                       `tfsdk:"lowest_progressive_inbound_policy_status"`
	MatchingAssets                       types.Int64                        `tfsdk:"matching_assets"`
	Namednetworks                        []tfTypes.NamednetworkNamedNetwork `tfsdk:"namednetworks"`
	PolicyAutomationConfigurable         types.Bool                         `tfsdk:"policy_automation_configurable"`
	PolicyProgressiveLastRefreshed       types.String                       `tfsdk:"policy_progressive_last_refreshed"`
	TagBasedPolicyName                   types.String                       `tfsdk:"tag_based_policy_name"`
	Templates                            []tfTypes.TemplateSummary          `tfsdk:"templates"`
}

// Metadata returns the data source type name.
func (r *SegmentDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_segment"
}

// Schema defines the schema for the data source.
func (r *SegmentDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Segment DataSource",

		Attributes: map[string]schema.Attribute{
			"auto_synchronize_enabled": schema.BoolAttribute{
				Computed: true,
			},
			"criteria": schema.StringAttribute{
				Computed: true,
			},
			"criteria_as_params": schema.StringAttribute{
				Computed: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"lowest_inbound_policy_status": schema.StringAttribute{
				Computed: true,
			},
			"lowest_outbound_policy_status": schema.StringAttribute{
				Computed: true,
			},
			"lowest_progressive_inbound_policy_status": schema.StringAttribute{
				Computed: true,
			},
			"matching_assets": schema.Int64Attribute{
				Computed: true,
			},
			"namednetworks": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"assigned_by_tag_based_policy": schema.BoolAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"ip_ranges": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										Computed: true,
									},
									"ip_count": schema.Int64Attribute{
										Computed: true,
									},
									"ip_range": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						"is_oob_network": schema.BoolAttribute{
							Computed: true,
						},
						"named_network_assignments": schema.Int64Attribute{
							Computed: true,
						},
						"named_network_description": schema.StringAttribute{
							Computed: true,
						},
						"named_network_name": schema.StringAttribute{
							Computed: true,
						},
						"namednetwork_tag_based_policy_assignments": schema.Int64Attribute{
							Computed: true,
						},
						"program_as_internet": schema.BoolAttribute{
							Computed: true,
						},
						"program_as_intranet": schema.BoolAttribute{
							Computed: true,
						},
						"region": schema.StringAttribute{
							Computed: true,
						},
						"service": schema.StringAttribute{
							Computed: true,
						},
						"total_comments": schema.Int64Attribute{
							Computed: true,
						},
						"total_count": schema.Int64Attribute{
							Computed: true,
						},
						"usergroup_named_network_assignments": schema.Int64Attribute{
							Computed: true,
						},
					},
				},
			},
			"policy_automation_configurable": schema.BoolAttribute{
				Computed: true,
			},
			"policy_progressive_last_refreshed": schema.StringAttribute{
				Computed: true,
			},
			"tag_based_policy_name": schema.StringAttribute{
				Computed: true,
			},
			"templates": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"access_policy_template": schema.BoolAttribute{
							Computed: true,
						},
						"assigned_by_tag_based_policy": schema.BoolAttribute{
							Computed: true,
						},
						"oob_template": schema.BoolAttribute{
							Computed: true,
						},
						"template_assignments": schema.Int64Attribute{
							Computed: true,
						},
						"template_category": schema.StringAttribute{
							Computed: true,
						},
						"template_description": schema.StringAttribute{
							Computed: true,
						},
						"template_id": schema.StringAttribute{
							Computed: true,
						},
						"template_name": schema.StringAttribute{
							Computed: true,
						},
						"template_paths": schema.Int64Attribute{
							Computed: true,
						},
						"template_ports": schema.Int64Attribute{
							Computed: true,
						},
						"template_tag_based_policy_assignments": schema.Int64Attribute{
							Computed: true,
						},
						"template_type": schema.StringAttribute{
							Computed: true,
						},
						"template_unassignments_pending_firewall_synchronize": schema.Int64Attribute{
							Computed: true,
						},
						"total_comments": schema.Int64Attribute{
							Computed: true,
						},
						"usergroup_template_assignments": schema.Int64Attribute{
							Computed: true,
						},
					},
				},
			},
		},
	}
}

func (r *SegmentDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.XshieldSDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.XshieldSDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SegmentDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SegmentDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var tagbasedpolicyID string
	tagbasedpolicyID = data.ID.ValueString()

	request := operations.GetTagBasedPolicyRequest{
		TagbasedpolicyID: tagbasedpolicyID,
	}
	res, err := r.client.Tagbasedpolicies.GetTagBasedPolicy(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.TagBasedPolicy != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedTagBasedPolicy(res.TagBasedPolicy)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
