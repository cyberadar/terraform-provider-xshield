// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-xshield-sdk/internal/sdk/models/shared"
	"net/http"
)

// SortField - field name to use for sorting.
type SortField string

const (
	SortFieldName  SortField = "name"
	SortFieldValue SortField = "value"
)

func (e SortField) ToPointer() *SortField {
	return &e
}
func (e *SortField) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		fallthrough
	case "value":
		*e = SortField(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SortField: %v", v)
	}
}

// SortOrder - Either ascending or descending ordering for the specified sortField
type SortOrder string

const (
	SortOrderAscending  SortOrder = "ascending"
	SortOrderDescending SortOrder = "descending"
)

func (e SortOrder) ToPointer() *SortOrder {
	return &e
}
func (e *SortOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ascending":
		fallthrough
	case "descending":
		*e = SortOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SortOrder: %v", v)
	}
}

type ListAssetTagsRequest struct {
	// Asset ID
	AssetID string `pathParam:"style=simple,explode=false,name=assetId"`
	// name search using equality
	Name []string `queryParam:"style=form,explode=true,name=name"`
	// value search using equality
	Value []string `queryParam:"style=form,explode=true,name=value"`
	// field name to use for sorting.
	SortField *SortField `queryParam:"style=form,explode=true,name=sortField"`
	// Either ascending or descending ordering for the specified sortField
	SortOrder *SortOrder `queryParam:"style=form,explode=true,name=sortOrder"`
	// Number of items to return per page if number of matches found exceeds this then pagination will be required to access all results
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Starting position in results
	Offset *int64 `queryParam:"style=form,explode=true,name=offset"`
}

func (o *ListAssetTagsRequest) GetAssetID() string {
	if o == nil {
		return ""
	}
	return o.AssetID
}

func (o *ListAssetTagsRequest) GetName() []string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListAssetTagsRequest) GetValue() []string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *ListAssetTagsRequest) GetSortField() *SortField {
	if o == nil {
		return nil
	}
	return o.SortField
}

func (o *ListAssetTagsRequest) GetSortOrder() *SortOrder {
	if o == nil {
		return nil
	}
	return o.SortOrder
}

func (o *ListAssetTagsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListAssetTagsRequest) GetOffset() *int64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

type ListAssetTagsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	Tags *shared.Tags
	// Bad Request
	ErrorResponse *shared.ErrorResponse
}

func (o *ListAssetTagsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListAssetTagsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListAssetTagsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListAssetTagsResponse) GetTags() *shared.Tags {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *ListAssetTagsResponse) GetErrorResponse() *shared.ErrorResponse {
	if o == nil {
		return nil
	}
	return o.ErrorResponse
}
