// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InboundToState string

const (
	InboundToStateUnsecured           InboundToState = "unsecured"
	InboundToStateSecureInternetPorts InboundToState = "secure-internet-ports"
	InboundToStateSecureAllPorts      InboundToState = "secure-all-ports"
	InboundToStateSecureInboundPaths  InboundToState = "secure-inbound-paths"
)

func (e InboundToState) ToPointer() *InboundToState {
	return &e
}
func (e *InboundToState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unsecured":
		fallthrough
	case "secure-internet-ports":
		fallthrough
	case "secure-all-ports":
		fallthrough
	case "secure-inbound-paths":
		*e = InboundToState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundToState: %v", v)
	}
}

type OutboundToState string

const (
	OutboundToStateUnsecured           OutboundToState = "unsecured"
	OutboundToStateSecureInternetPaths OutboundToState = "secure-internet-paths"
	OutboundToStateSecureIntranetPaths OutboundToState = "secure-intranet-paths"
)

func (e OutboundToState) ToPointer() *OutboundToState {
	return &e
}
func (e *OutboundToState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unsecured":
		fallthrough
	case "secure-internet-paths":
		fallthrough
	case "secure-intranet-paths":
		*e = OutboundToState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutboundToState: %v", v)
	}
}

type AssetStateTransitionInput struct {
	Comment         *string          `json:"comment,omitempty"`
	InboundToState  *InboundToState  `json:"inboundToState,omitempty"`
	OutboundToState *OutboundToState `json:"outboundToState,omitempty"`
}

func (o *AssetStateTransitionInput) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *AssetStateTransitionInput) GetInboundToState() *InboundToState {
	if o == nil {
		return nil
	}
	return o.InboundToState
}

func (o *AssetStateTransitionInput) GetOutboundToState() *OutboundToState {
	if o == nil {
		return nil
	}
	return o.OutboundToState
}
