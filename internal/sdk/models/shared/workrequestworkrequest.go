// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy/terraform-provider-xshield-sdk/internal/sdk/internal/utils"
	"time"
)

// WorkrequestWorkRequest - WorkRequest definition Represents a unit of work that will be evaluated asynchronously and tracks its progress and can be used to monitor asynchronous processing
type WorkrequestWorkRequest struct {
	// action that triggered work item creation
	Action WorkrequestWorkItemAction `json:"action"`
	// timestamp when this work item's evaluation reached its final terminal status
	CompletedAt *time.Time `json:"completedAt,omitempty"`
	// completed sub work items count
	CompletedSubTasks *int64 `json:"completedSubTasks,omitempty"`
	// timestamp when this work item was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Unique identifier for this work item. Should be provided to any other endpoints accepting workId to reference this particular workItem.
	ID string `json:"id"`
	// work id for the parent work request
	ParentWorkID *string `json:"parentWorkId,omitempty"`
	// holds any additional metadata required for work item evaluation
	Payload *string `json:"payload,omitempty"`
	// Pending sub work items count
	PendingSubTasks *int64 `json:"pendingSubTasks,omitempty"`
	// asset or group identifier that action was applied to and work item will operate on during evaluation
	ResourceID string `json:"resourceId"`
	// asset or group name that action was applied to and work item will operate on during evaluation
	ResourceName *string `json:"resourceName,omitempty"`
	// timestamp when this work item should retried
	RetryAfter *time.Time `json:"retryAfter,omitempty"`
	// Count of no of times retried
	RetryCounter *int64 `json:"retryCounter,omitempty"`
	// status of this work item. Will be automatically updated as work item evaluation progress until reaching a terminal status
	Status *WorkrequestChangeStatus `json:"status,omitempty"`
	// principal that initiated this work item
	Subject string `json:"subject"`
	// Propogate actor user name for auditing async actions performed by actor submitted task
	SubjectEmail *string `json:"subjectEmail,omitempty"`
}

func (w WorkrequestWorkRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WorkrequestWorkRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *WorkrequestWorkRequest) GetAction() WorkrequestWorkItemAction {
	if o == nil {
		return WorkrequestWorkItemAction("")
	}
	return o.Action
}

func (o *WorkrequestWorkRequest) GetCompletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *WorkrequestWorkRequest) GetCompletedSubTasks() *int64 {
	if o == nil {
		return nil
	}
	return o.CompletedSubTasks
}

func (o *WorkrequestWorkRequest) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *WorkrequestWorkRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *WorkrequestWorkRequest) GetParentWorkID() *string {
	if o == nil {
		return nil
	}
	return o.ParentWorkID
}

func (o *WorkrequestWorkRequest) GetPayload() *string {
	if o == nil {
		return nil
	}
	return o.Payload
}

func (o *WorkrequestWorkRequest) GetPendingSubTasks() *int64 {
	if o == nil {
		return nil
	}
	return o.PendingSubTasks
}

func (o *WorkrequestWorkRequest) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

func (o *WorkrequestWorkRequest) GetResourceName() *string {
	if o == nil {
		return nil
	}
	return o.ResourceName
}

func (o *WorkrequestWorkRequest) GetRetryAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.RetryAfter
}

func (o *WorkrequestWorkRequest) GetRetryCounter() *int64 {
	if o == nil {
		return nil
	}
	return o.RetryCounter
}

func (o *WorkrequestWorkRequest) GetStatus() *WorkrequestChangeStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *WorkrequestWorkRequest) GetSubject() string {
	if o == nil {
		return ""
	}
	return o.Subject
}

func (o *WorkrequestWorkRequest) GetSubjectEmail() *string {
	if o == nil {
		return nil
	}
	return o.SubjectEmail
}
